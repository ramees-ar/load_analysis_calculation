# coding: utf-8

"""
    Thingspine

    This page contains the documentation on how to use Thingspine services through HTTP API.   # noqa: E501

    The version of the OpenAPI document: 0.24.6
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RecentlyUpdatedRootV2Entities(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            total = schemas.IntSchema
            
            
            class nodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RootEntityList']:
                        return RootEntityList
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RootEntityList'], typing.List['RootEntityList']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nodes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RootEntityList':
                    return super().__getitem__(i)
            
            
            class recentUpdates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RecentlyUpdatedV2Entity']:
                        return RecentlyUpdatedV2Entity
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RecentlyUpdatedV2Entity'], typing.List['RecentlyUpdatedV2Entity']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recentUpdates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RecentlyUpdatedV2Entity':
                    return super().__getitem__(i)
            __annotations__ = {
                "total": total,
                "nodes": nodes,
                "recentUpdates": recentUpdates,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodes"]) -> MetaOapg.properties.nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recentUpdates"]) -> MetaOapg.properties.recentUpdates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", "nodes", "recentUpdates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodes"]) -> typing.Union[MetaOapg.properties.nodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recentUpdates"]) -> typing.Union[MetaOapg.properties.recentUpdates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", "nodes", "recentUpdates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nodes: typing.Union[MetaOapg.properties.nodes, list, tuple, schemas.Unset] = schemas.unset,
        recentUpdates: typing.Union[MetaOapg.properties.recentUpdates, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecentlyUpdatedRootV2Entities':
        return super().__new__(
            cls,
            *_args,
            total=total,
            nodes=nodes,
            recentUpdates=recentUpdates,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.recently_updated_v2_entity import RecentlyUpdatedV2Entity
from openapi_client.model.root_entity_list import RootEntityList
