# coding: utf-8

"""
    Thingspine

    This page contains the documentation on how to use Thingspine services through HTTP API.   # noqa: E501

    The version of the OpenAPI document: 0.24.6
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CheckPermissionPayload(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "namespace",
            "object",
            "relation",
        }
        
        class properties:
            namespace = schemas.StrSchema
            relation = schemas.StrSchema
            object = schemas.StrSchema
            subject_id = schemas.StrSchema
            subjectSetNamespace = schemas.StrSchema
            subjectSetObject = schemas.StrSchema
            subjectSetRelation = schemas.StrSchema
            __annotations__ = {
                "namespace": namespace,
                "relation": relation,
                "object": object,
                "subject_id": subject_id,
                "subjectSetNamespace": subjectSetNamespace,
                "subjectSetObject": subjectSetObject,
                "subjectSetRelation": subjectSetRelation,
            }
    
    namespace: MetaOapg.properties.namespace
    object: MetaOapg.properties.object
    relation: MetaOapg.properties.relation
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relation"]) -> MetaOapg.properties.relation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject_id"]) -> MetaOapg.properties.subject_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjectSetNamespace"]) -> MetaOapg.properties.subjectSetNamespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjectSetObject"]) -> MetaOapg.properties.subjectSetObject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjectSetRelation"]) -> MetaOapg.properties.subjectSetRelation: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["namespace", "relation", "object", "subject_id", "subjectSetNamespace", "subjectSetObject", "subjectSetRelation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relation"]) -> MetaOapg.properties.relation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject_id"]) -> typing.Union[MetaOapg.properties.subject_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjectSetNamespace"]) -> typing.Union[MetaOapg.properties.subjectSetNamespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjectSetObject"]) -> typing.Union[MetaOapg.properties.subjectSetObject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjectSetRelation"]) -> typing.Union[MetaOapg.properties.subjectSetRelation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["namespace", "relation", "object", "subject_id", "subjectSetNamespace", "subjectSetObject", "subjectSetRelation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        namespace: typing.Union[MetaOapg.properties.namespace, str, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        relation: typing.Union[MetaOapg.properties.relation, str, ],
        subject_id: typing.Union[MetaOapg.properties.subject_id, str, schemas.Unset] = schemas.unset,
        subjectSetNamespace: typing.Union[MetaOapg.properties.subjectSetNamespace, str, schemas.Unset] = schemas.unset,
        subjectSetObject: typing.Union[MetaOapg.properties.subjectSetObject, str, schemas.Unset] = schemas.unset,
        subjectSetRelation: typing.Union[MetaOapg.properties.subjectSetRelation, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CheckPermissionPayload':
        return super().__new__(
            cls,
            *_args,
            namespace=namespace,
            object=object,
            relation=relation,
            subject_id=subject_id,
            subjectSetNamespace=subjectSetNamespace,
            subjectSetObject=subjectSetObject,
            subjectSetRelation=subjectSetRelation,
            _configuration=_configuration,
            **kwargs,
        )
