# coding: utf-8

"""
    Thingspine

    This page contains the documentation on how to use Thingspine services through HTTP API.   # noqa: E501

    The version of the OpenAPI document: 0.24.6
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BulkUpdatePermissionPayload(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "relation_tuple",
                    "action",
                }
                
                class properties:
                    
                    
                    class action(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def INSERT(cls):
                            return cls("insert")
                        
                        @schemas.classproperty
                        def DELETE(cls):
                            return cls("delete")
                    
                    
                    class relation_tuple(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "subject_id",
                                "namespace",
                                "object",
                                "relation",
                                "subject_set",
                            }
                            
                            class properties:
                                namespace = schemas.StrSchema
                                object = schemas.StrSchema
                                relation = schemas.StrSchema
                                subject_id = schemas.StrSchema
                                
                                
                                class subject_set(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            namespace = schemas.StrSchema
                                            object = schemas.StrSchema
                                            relation = schemas.StrSchema
                                            __annotations__ = {
                                                "namespace": namespace,
                                                "object": object,
                                                "relation": relation,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relation"]) -> MetaOapg.properties.relation: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["namespace", "object", "relation", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> typing.Union[MetaOapg.properties.namespace, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relation"]) -> typing.Union[MetaOapg.properties.relation, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["namespace", "object", "relation", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        namespace: typing.Union[MetaOapg.properties.namespace, str, schemas.Unset] = schemas.unset,
                                        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
                                        relation: typing.Union[MetaOapg.properties.relation, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'subject_set':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            namespace=namespace,
                                            object=object,
                                            relation=relation,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "namespace": namespace,
                                    "object": object,
                                    "relation": relation,
                                    "subject_id": subject_id,
                                    "subject_set": subject_set,
                                }
                        
                        subject_id: MetaOapg.properties.subject_id
                        namespace: MetaOapg.properties.namespace
                        object: MetaOapg.properties.object
                        relation: MetaOapg.properties.relation
                        subject_set: MetaOapg.properties.subject_set
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["relation"]) -> MetaOapg.properties.relation: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["subject_id"]) -> MetaOapg.properties.subject_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["subject_set"]) -> MetaOapg.properties.subject_set: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["namespace", "object", "relation", "subject_id", "subject_set", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["relation"]) -> MetaOapg.properties.relation: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["subject_id"]) -> MetaOapg.properties.subject_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["subject_set"]) -> MetaOapg.properties.subject_set: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["namespace", "object", "relation", "subject_id", "subject_set", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            subject_id: typing.Union[MetaOapg.properties.subject_id, str, ],
                            namespace: typing.Union[MetaOapg.properties.namespace, str, ],
                            object: typing.Union[MetaOapg.properties.object, str, ],
                            relation: typing.Union[MetaOapg.properties.relation, str, ],
                            subject_set: typing.Union[MetaOapg.properties.subject_set, dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'relation_tuple':
                            return super().__new__(
                                cls,
                                *_args,
                                subject_id=subject_id,
                                namespace=namespace,
                                object=object,
                                relation=relation,
                                subject_set=subject_set,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "action": action,
                        "relation_tuple": relation_tuple,
                    }
            
            relation_tuple: MetaOapg.properties.relation_tuple
            action: MetaOapg.properties.action
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["relation_tuple"]) -> MetaOapg.properties.relation_tuple: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["action", "relation_tuple", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["relation_tuple"]) -> MetaOapg.properties.relation_tuple: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action", "relation_tuple", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                relation_tuple: typing.Union[MetaOapg.properties.relation_tuple, dict, frozendict.frozendict, ],
                action: typing.Union[MetaOapg.properties.action, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    relation_tuple=relation_tuple,
                    action=action,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'BulkUpdatePermissionPayload':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
